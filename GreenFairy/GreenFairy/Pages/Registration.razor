@page "/registration"
@using GreenFairy.Data.Authentication
@using GreenFairy.DomainLayer.DataBase.Entities;
@using GreenFairy.DomainLayer.DataBase;

@inject UserAccountService service
@inject IJSRuntime js
@inject AuthenticationStateProvider provider
@inject NavigationManager navManager
@inject Repository repo


<RadzenStack Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 800px; overflow: hidden;">

    <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-text-align-center rz-p-12" Style="height: 100%; background-color: #8FBC8F;">
        <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="rz-color-white rz-mb-6">Вітаємо!</RadzenText>

    </RadzenCard>

    <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-p-12">
        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" Class="rz-mb-6">
            Реєстрація
        </RadzenText>

        <RadzenStack Class="rz-my-12 rz-mx-auto rz-border-radius-3 rz-shadow-5" Style="margin: 2em; padding: 1em" AlignItems="AlignItems.Start">

            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H2" Class="rz-mb-6" Style="margin-top: 1em">
                Імя:
            </RadzenText>
            <RadzenTextBox @bind-Value="@model.Name" />

            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H2" Class="rz-mb-6" Style="margin-top: 1em">
                Прізвище:
            </RadzenText>
            <RadzenTextBox @bind-Value="@model.Surname" />
             
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H2" Class="rz-mb-6" Style="margin-top: 1em">
                Контактний номер:
            </RadzenText>
            <RadzenTextBox @bind-Value="@model.Phone" />

            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H2" Class="rz-mb-6" Style="margin-top: 1em">
                Електрона пошта:
            </RadzenText>
            <RadzenTextBox @bind-Value="@model.Email" />

            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H2" Class="rz-mb-6" Style="margin-top: 1em">
                Пароль:
            </RadzenText>
            <RadzenPassword @bind-Value="@model.Password" />

            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H2" Class="rz-mb-6" Style="margin-top: 1em;">
                Повторіть пароль:
            </RadzenText>
            <RadzenPassword @bind-Value="@model.RepitePassword" />

            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Style="margin-top: 2em; margin-right: 2em; padding: 1em; background: #5F8D6C;" Text="Зареєструватись" Click="@Register" />
                <RadzenButton Style="margin-top: 2em; margin-left: 2em; padding: 1em; background: #5F8D6C;" Text="Відміна" Click="@Cancel" />
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</RadzenStack>

@code {

    private class RegistrationModel
    {
        public ClientEntity UserEntity = new();

        public string Email { get => UserEntity.Email; set => UserEntity.Email = ValidateEmail(value); }

        public string Password { get => UserEntity.Password; set => UserEntity.Password = ValidatePassword(value); }

        private string repitePassword;
        public string RepitePassword { get => repitePassword; set => repitePassword = ValidatePassword(value); }

        public string Name { get => UserEntity.Name; set => UserEntity.Name = value; }

        public string Surname { get => UserEntity.Surname; set => UserEntity.Surname = value; }

        

        public string Phone { get => UserEntity.Phone.ToString(); set => UserEntity.Phone = ValidatePhone(value); }

        private string ValidateEmail(string email)
        {
            return email;
        }

        private int ValidatePhone(string phone)
        {
            return int.Parse(phone);
        }

        private string ValidatePassword(string password)
        {
            return password;
        }
    }

    private RegistrationModel model = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void Cancel()
    {
        navManager.NavigateTo("/login", true);
    }

    private async void Register()
    {
        if (model.RepitePassword != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Пароль не відповідає повторно введеному!");
            return;
        }

        model.UserEntity.SaveToDB(repo);

        var userAccount = service.GetUserByName(model.Email);

        var customProvider = provider as CustomAuthenticationStateProvider;
        await customProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.Name,
                Role = userAccount.Role
            });
        navManager.NavigateTo("/", true);
    }
}
