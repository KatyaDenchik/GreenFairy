@page "/fetchdata"
@attribute [Authorize(Roles = "Admin")]
@inject EntityService entityService
@inject Repository repo
@inject DataBaseView dataBaseView;
<PageTitle>Information</PageTitle>
@using GreenFairy.Data
@using GreenFairy.DomainLayer.DataBase.Entities.Abstract
@using GreenFairy.ViewModels
@using GreenFairy.DomainLayer.DataBase
@using GreenFairy.DomainLayer.DataBase.Entities

<h1>Information</h1>

<div>
    <select name="entities" id="entities" @bind="@dataBaseView.TabelName">

        @foreach (var type in dataBaseView.EntityTypes)
        {
            <option value="@type.Name">@type.Name</option>
        }

    </select>
</div>

@if (entity == null)
{
    <p>Завантаження.......</p>
}
else
{
    <RadzenDataGrid @ref=ordersGrid AllowFiltering="true" AllowRowSelectOnRowClick="true" AllowColumnResize="true" AllowColumnPicking="true"
                AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedEntity
                Data="@entity" Count="@dataBaseView.Entities.Count" TItem="IEntity">
        <Columns>

            @foreach (var property in dataBaseView.Type.GetProperties())
            {
                <RadzenDataGridColumn TItem="IEntity" Title="@property.Name" Sortable="true" Filterable="true" Property="@property.Name" Width="80px" TextAlign="TextAlign.Center">
                    <Template Context="entity">

                        @if (property.Name == "Id")
                        {
                            <RadzenLabel>@entity.Id</RadzenLabel>
                        }
                        else if (property.Name == "Photo")
                        {

                        }
                        else
                        {
                            <RadzenTextBox Value="@property.GetValue(entity)?.ToString()" Change="(newValue)=>{dataBaseView.Change(entity, property, newValue);}"></RadzenTextBox>
                        }
                    </Template>
                </RadzenDataGridColumn>
            }

        </Columns>
    </RadzenDataGrid>
}



<RadzenButton Click="dataBaseView.Save">Зберегти</RadzenButton>

<RadzenButton Click="()=>{dataBaseView.Add();  ordersGrid.Reload();}">Додати</RadzenButton>

<RadzenButton Click="()=>{dataBaseView.Delete(selectedEntity); ordersGrid.Reload();}">Видалити</RadzenButton>

@code{
    RadzenDataGrid<IEntity>? ordersGrid;

    IList<IEntity> selectedEntity = new List<IEntity>();

    IEnumerable<IEntity> entity;

    protected override async Task OnInitializedAsync()
    {
        dataBaseView.PropertyChanged += async (o, a) => 
        {
            entity = null;
            entity = await Task.Run(() => dataBaseView.Entities);
            this.StateHasChanged();
        };
        entity = await Task.Run(() => dataBaseView.Entities);
    }
}

