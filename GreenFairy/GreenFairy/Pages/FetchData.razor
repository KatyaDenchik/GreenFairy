@page "/fetchdata"
@attribute [Authorize(Roles = "Admin")]
@inject EntityService entityService
@inject Repository repo
@inject DataBaseView dataBaseView;
<PageTitle>Information</PageTitle>
@using GreenFairy.Data
@using GreenFairy.DomainLayer.DataBase.Entities.Abstract
@using GreenFairy.ViewModels
@using GreenFairy.DomainLayer.DataBase
@using GreenFairy.DomainLayer.DataBase.Entities

<h1>Інформація про рослини, клієнтів, замовлення та адміністраторів</h1>

<div>
    <select name="entities" id="entities" @bind="@dataBaseView.TabelName">

        @foreach (var type in dataBaseView.EntityTypes)
        {
            <option value="@type.Name">@type.Name</option>
        }

    </select>
</div>

@if (entities == null)
{
    <div class="col-md-4 p-3">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Завантаження</RadzenText>
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </RadzenCard>
    </div>

}
else
{
    <RadzenDataGrid @ref=ordersGrid AllowFiltering="true" AllowRowSelectOnRowClick="true" AllowColumnResize="true" AllowColumnPicking="true"
                FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="5" AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left" FilterCaseSensitivity="@filterCaseSensitivity" ShowPagingSummary="true" LogicalFilterOperator="@logicalFilterOperator" SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedEntity
                Data="@entities" Count="@dataBaseView.Entities.Count" TItem="IEntity">
        <Columns>

            @foreach (var property in dataBaseView.Type.GetProperties())
            {
                <RadzenDataGridColumn TItem="IEntity" Title="@property.Name" Sortable="true" Filterable="true" Property="@property.Name" Width="80px" TextAlign="TextAlign.Center">
                    <Template Context="entity">

                        @if (property.Name == "Id")
                        {
                            <RadzenLabel>@entity.Id</RadzenLabel>
                        }
                        else if (property.Name == "Photo")
                        {
                            <RadzenCard>
                                <div>
                                    <RadzenFileInput TValue="string" class="w-100" Change="newValue=>{dataBaseView.Change(entity, property, newValue);}" />
                                </div>

                                <div>
                                    <RadzenImage class="img-fluid" Path="@property.GetValue(entity).ToString()"></RadzenImage>
                                </div>
                            </RadzenCard>

                        }
                        else if (property.PropertyType.Name.Contains("Collection"))
                        {

                            <RadzenTextBox Value="@GetCollection(property.GetValue(entity))" Change="(newValue)=>{dataBaseView.Change(entity, property, newValue);}"></RadzenTextBox>

                        }
                        else
                        {
                            <RadzenTextBox Value="@property.GetValue(entity)?.ToString()" Change="(newValue)=>{dataBaseView.Change(entity, property, newValue);}"></RadzenTextBox>
                        }
                    </Template>
                </RadzenDataGridColumn>
            }
        </Columns>
    </RadzenDataGrid>
}



<RadzenButton Style="background-color: #006400; margin: 5px;" Click="()=>{dataBaseView.Save(); Reload();}">Зберегти</RadzenButton>

<RadzenButton Style="background-color: #006400; margin: 5px;" Click="()=>{dataBaseView.Add();  Reload(); }">Додати</RadzenButton>

<RadzenButton Style="background-color: #006400; margin: 5px;" Click="()=>{dataBaseView.Delete(selectedEntity); Reload();}">Видалити</RadzenButton>

@code {
    RadzenDataGrid<IEntity>? ordersGrid;
    LogicalFilterOperator logicalFilterOperator = LogicalFilterOperator.And;
    FilterCaseSensitivity filterCaseSensitivity = FilterCaseSensitivity.CaseInsensitive;

    IList<IEntity> selectedEntity = new List<IEntity>();
    IEnumerable<IEntity> entities;

    private async void Reload()
    {
        entities = await Task.Run(() => dataBaseView.Entities);
        await ordersGrid.Reload();
    }

    protected override async Task OnInitializedAsync()
    {
        dataBaseView.PropertyChanged += async (o, a) =>
        {
            entities = null;
            entities = await Task.Run(() => dataBaseView.Entities);
            await this.InvokeAsync(StateHasChanged);
        };
        entities = await Task.Run(() => dataBaseView.Entities);
    }

    private string GetCollection(object obj)
    {
        var str = string.Empty;

        var collection = obj as IEnumerable<IEntity>;

        if (collection is null)
        {
            return str;
        }
        str = string.Join(", ", collection.Select(s => s.Id));
        return str;
    }
}

