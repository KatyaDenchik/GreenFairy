@page "/Basket"
@using GreenFairy.Data.Authentication;
@using GreenFairy.DomainLayer.DataBase.Entities
@using GreenFairy.DomainLayer.DataBase.Entities.Abstract;
@using GreenFairy.DomainLayer.DataBase;
@using GreenFairy.ViewModels;
@inject DataBaseView dataBaseView
@inject Repository repo
@inject UserAccountService service
@inject AuthenticationStateProvider provider

@if (Order.Plants.Count == 0)
{
    <div style="text-align:center;">

        <h3>Ваш кошик пустий</h3>
        <h3>Пропонуємо перейти до вибору товарів</h3>
        <a href="/">Перейти до товарів</a>

    </div>
}
else
{
    <div >
        <RadzenDataGrid @ref=Grid Data="@plantModels" Count="@Order.Plants.Count" TItem="PlantModel" Style=" display: flex; justify-content: start; align-items: start;">
        <Columns>

            <RadzenDataGridColumn  TItem="PlantModel" Width="80px" TextAlign="TextAlign.Left">
                <Template Context="plantModel">
                        <div class="rz-p-12 rz-text-align-left">
                        <RadzenImage Path="@plantModel.Plant.Photo.ToString()" Style="width: 150px; height: 150px;" />
                        <RadzenLabel>@plantModel.Plant.Name</RadzenLabel>
                        <RadzenNumeric TValue="int" @bind-Value="plantModel.Plant.Amount" Min="1" Max="plantModel.MaxCount" />
                        <RadzenBadge BadgeStyle="BadgeStyle.Success" Style="scrollbar-arrow-color " Text=@($"Ціна: {String.Format(new System.Globalization.CultureInfo("uk-UA"), "{0:C}", plantModel.Cost)}")></RadzenBadge>
                        <RadzenButton Click="()=>{DeletePlant(plantModel.Plant);}">Видалити з замовлення</RadzenButton>
                        </div>
                    </Template>
                </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
        </div>
   
    
}

@code {
    RadzenDataGrid<PlantModel>? Grid;

    class PlantModel
    {
        public PlantEntity Plant;

        public double Cost => Plant.Amount * Plant.Price;

        public int MaxCount;
    }
    private List<PlantModel> plantModels = new();
    public OrderEntity Order => User.CurentOrder;

    public AnonUserAccaunt User = UserAccountService.CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        plantModels.AddRange(Order.Plants.Select(s => new PlantModel 
            { 
            Plant = s, 
            MaxCount = repo.Get<PlantEntity>(p=>p.Name == s.Name).First().Amount 
            }));
    }

    public void DeletePlant(PlantEntity plant)
    {
        Order.Plants.Remove(plant);
        plantModels.Remove(plantModels.Single(p => p.Plant.Name == plant.Name));
        Grid.Reload();
    }


}
