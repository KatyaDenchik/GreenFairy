@page "/login"
@using GreenFairy.Data.Authentication
@inject UserAccountService service
@inject IJSRuntime js
@inject AuthenticationStateProvider provider
@inject NavigationManager navManager


<RadzenRow Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 800px; overflow: hidden;">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-text-align-center rz-p-12" Style="height: 100%; background-color: #8FBC8F;">
            <RadzenText  TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="rz-color-white rz-mb-6">Вітаємо!</RadzenText>
            
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-p-12">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" Class="rz-mb-6">
                Вхід
            </RadzenText>
            <RadzenLogin AllowRegister=true
                         AllowRememberMe=true
                         AllowResetPassword=false
                         AutoComplete=true
                         RememberMe=true
                         LoginText="Увійти"
                         UserText="Логін:" PasswordText="Пароль:"
                         UserRequired="Потрібно ім'я користувача"
                         PasswordRequired="Потрібен пароль"
                         RegisterText="Регістрація"
                         RegisterMessageText="Ви не маєте акаунту?"
                         RememberMeText="Запам'ятати мене"
                         Login=@Authenticate
                         Register=@OnRegister />
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task Authenticate(LoginArgs a)
    {
        var userAccount = service.GetUserByName(a.Username);
        if (userAccount is null)
        {
            await js.InvokeVoidAsync("alert", "Такого користувача не існує!");
            return;
        }

        if (userAccount.Password != a.Password)
        {
            await js.InvokeVoidAsync("alert", "Ви ввели невірний пароль, спробуйте ще раз.");
            return;
        }

        var customProvider = provider as CustomAuthenticationStateProvider;
        await customProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.Name,
                Role = userAccount.Role
            });
        navManager.NavigateTo("/", true);
    }

    void OnRegister(object name)
    {
        navManager.NavigateTo("/registration", true);
    }
}
